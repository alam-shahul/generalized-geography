{"version":3,"sources":["layout.js","countries.js","App.js","reportWebVitals.js","index.js"],"names":["elk","Elk","defaultLayoutOptions","createGraphLayout","elements","a","nodes","edges","forEach","el","isNode","push","id","width","__rf","height","target","source","layout","children","newGraph","map","node","find","n","x","y","position","Math","random","wordset","App","useState","wordsetTitle","guess","setGuess","showFullMap","setShowFullMap","errorMessage","setErrorMessage","startNode","type","data","label","initialElements","lastNode","setLastNode","completeElements","setCompleteElements","setElements","setViewFitHook","useEffect","allElements","names","firstLetterMap","Map","name","length","toString","connectable","firstLetter","toLowerCase","neighbors","get","set","lastLetter","neighbor","edge","concat","style","strokeWidth","stroke","arrowHeadType","buildCompleteGraph","newWordset","error","console","log","loadWordset","then","els","catch","err","onLoad","reactFlowInstance","fitView","className","onSubmit","e","preventDefault","value","element","inWordlist","newNode","extraneousEdges","otherFirstLetter","extraneousEdge","strokeDasharray","newElements","addNode","onChange","onClick","color","border","panOnScroll","onlyRenderVisibleElements","instance","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAMMA,EAAM,IAAIC,IAAI,CAClBC,qBAAsB,CACpB,gBAAiB,cACjB,uBAAwB,MACxB,gBAAiB,UAIfC,EAAiB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBC,EAAmB,GACnBC,EAA4B,GAElCH,EAASI,SAAQ,SAACC,GACC,IAAD,QAAZC,YAAOD,GACTH,EAAMK,KAAK,CACTC,GAAIH,EAAGG,GACPC,MAAK,oBAAEJ,EAAGK,YAAL,aAAE,EAASD,aAAX,QAnBS,GAoBdE,OAAM,oBAAEN,EAAGK,YAAL,aAAE,EAASC,cAAX,QAnBS,KAsBjBR,EAAMI,KAAK,CACTC,GAAIH,EAAGG,GACPI,OAAQP,EAAGO,OACXC,OAAQR,EAAGQ,YAfO,SAoBDjB,EAAIkB,OAAO,CAChCN,GAAI,OACJO,SAAUb,EACVC,MAAOA,IAvBe,cAoBlBa,EApBkB,yBAyBjBhB,EAASiB,KAAI,SAACZ,GACnB,GAAIC,YAAOD,GAAK,CAAC,IAAD,EACRa,EAAI,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAUD,gBAAb,aAAG,EAAoBI,MAAK,SAACC,GAAD,OAAOA,EAAEZ,KAAOH,EAAGG,OACjD,OAAJU,QAAI,IAAJA,OAAA,EAAAA,EAAMG,KAAN,OAAWH,QAAX,IAAWA,OAAX,EAAWA,EAAMI,KAAjB,OAAsBJ,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMT,SAA5B,OAAqCS,QAArC,IAAqCA,OAArC,EAAqCA,EAAMP,UAC7CN,EAAGkB,SAAW,CACZF,EAAGH,EAAKG,EAAIH,EAAKT,MAAQ,EAAIe,KAAKC,SAAW,IAAO,IACpDH,EAAGJ,EAAKI,EAAIJ,EAAKP,OAAS,EAAI,KAIpC,OAAON,MAnCe,2CAAH,sDAuCRN,ICrDF2B,EAAU,CACrB,cACA,UACA,UACA,UACA,SACA,iBACA,YACA,UACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,SACA,UACA,qBACA,WACA,SACA,SACA,WACA,UACA,UACA,WACA,WACA,SACA,aACA,sBACA,OACA,QACA,QACA,WACA,UACA,QACA,mCACA,aACA,UACA,OACA,SACA,iBACA,UACA,WACA,WACA,qBACA,aACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,YACA,SACA,gBACA,SACA,QACA,WACA,UACA,UACA,QACA,YACA,OACA,OACA,UACA,SACA,QACA,cACA,UACA,QACA,SACA,aACA,QACA,WACA,cACA,cACA,SACA,SACA,aACA,OACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,YACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,YACA,SACA,aACA,UACA,SACA,WACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,cACA,YACA,QACA,UACA,SACA,OACA,WACA,QACA,SACA,mBACA,WACA,OACA,cACA,SACA,WACA,QACA,UACA,qBACA,SACA,mBACA,WACA,iCACA,QACA,aACA,sBACA,eACA,UACA,SACA,aACA,eACA,YACA,WACA,WACA,kBACA,UACA,eACA,cACA,QACA,YACA,QACA,WACA,YACA,SACA,cACA,QACA,SACA,aACA,WACA,WACA,OACA,QACA,oBACA,UACA,SACA,eACA,SACA,SACA,UACA,uBACA,iBACA,gBACA,UACA,aACA,UACA,eACA,YACA,UACA,QACA,SACA,Y,eC4CaC,MAhOf,WACE,MAAwCC,mBAAS,aAAjD,mBAAOC,EAAP,KACA,GADA,KAC0BD,sBAA1B,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAwCL,qBAAxC,mBAAOM,EAAP,KAAqBC,EAArB,KAEMC,EAAY,CAChB5B,GAAI,IACJ6B,KAAM,QACNC,KAAM,CAAEC,MAAO,WACfhB,SAAU,CAAEF,EAAG,IAAKC,EAAG,KAGnBkB,EAAkB,CAACJ,GAEzB,EAAgCR,mBAASQ,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgDd,qBAAhD,mBAAOe,EAAP,KAAyBC,EAAzB,KACA,EAAgChB,mBAASY,GAA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","file":"static/js/main.144940e9.chunk.js","sourcesContent":["import Elk from 'elkjs/lib/elk.bundled.js';\nimport { isNode } from 'react-flow-renderer';\n\nconst DEFAULT_WIDTH = 75\nconst DEFAULT_HEIGHT = 75\n\nconst elk = new Elk({\n  defaultLayoutOptions: {\n    'elk.algorithm': 'elk.layered',\n    'elk.spacing.nodeNode': '200',\n    'elk.direction': \"DOWN\"\n  }\n})\n\nconst createGraphLayout = async (elements) => {\n  const nodes: ElkNode[] = []\n  const edges: ElkPrimitiveEdge[] = []\n\n  elements.forEach((el) => {\n    if (isNode(el)) {\n      nodes.push({\n        id: el.id,\n        width: el.__rf?.width ?? DEFAULT_WIDTH,\n        height: el.__rf?.height ?? DEFAULT_HEIGHT\n      })\n    } else {\n      edges.push({\n        id: el.id,\n        target: el.target,\n        source: el.source\n      })\n    }\n  })\n\n  const newGraph = await elk.layout({\n    id: 'root',\n    children: nodes,\n    edges: edges\n  })\n  return elements.map((el) => {\n    if (isNode(el)) {\n      const node = newGraph?.children?.find((n) => n.id === el.id)\n      if (node?.x && node?.y && node?.width && node?.height) {\n        el.position = {\n          x: node.x - node.width / 2 + Math.random() / 1000 + 250,\n          y: node.y - node.height / 2 + 25\n        }\n      }\n    }\n    return el\n  })\n}\n\nexport default createGraphLayout;\n","export const wordset = [\n  \"Afghanistan\",\n  \"Albania\",\n  \"Algeria\",\n  \"Andorra\",\n  \"Angola\",\n  \"Antigua & Deps\",\n  \"Argentina\",\n  \"Armenia\",\n  \"Australia\",\n  \"Austria\",\n  \"Azerbaijan\",\n  \"Bahamas\",\n  \"Bahrain\",\n  \"Bangladesh\",\n  \"Barbados\",\n  \"Belarus\",\n  \"Belgium\",\n  \"Belize\",\n  \"Benin\",\n  \"Bhutan\",\n  \"Bolivia\",\n  \"Bosnia Herzegovina\",\n  \"Botswana\",\n  \"Brazil\",\n  \"Brunei\",\n  \"Bulgaria\",\n  \"Burkina\",\n  \"Burundi\",\n  \"Cambodia\",\n  \"Cameroon\",\n  \"Canada\",\n  \"Cape Verde\",\n  \"Central African Rep\",\n  \"Chad\",\n  \"Chile\",\n  \"China\",\n  \"Colombia\",\n  \"Comoros\",\n  \"Congo\",\n  \"Democratic Republic of the Congo\",\n  \"Costa Rica\",\n  \"Croatia\",\n  \"Cuba\",\n  \"Cyprus\",\n  \"Czech Republic\",\n  \"Denmark\",\n  \"Djibouti\",\n  \"Dominica\",\n  \"Dominican Republic\",\n  \"East Timor\",\n  \"Ecuador\",\n  \"Egypt\",\n  \"El Salvador\",\n  \"Equatorial Guinea\",\n  \"Eritrea\",\n  \"Estonia\",\n  \"Ethiopia\",\n  \"Fiji\",\n  \"Finland\",\n  \"France\",\n  \"Gabon\",\n  \"Gambia\",\n  \"Georgia\",\n  \"Germany\",\n  \"Ghana\",\n  \"Greece\",\n  \"Grenada\",\n  \"Guatemala\",\n  \"Guinea\",\n  \"Guinea-Bissau\",\n  \"Guyana\",\n  \"Haiti\",\n  \"Honduras\",\n  \"Hungary\",\n  \"Iceland\",\n  \"India\",\n  \"Indonesia\",\n  \"Iran\",\n  \"Iraq\",\n  \"Ireland\",\n  \"Israel\",\n  \"Italy\",\n  \"Ivory Coast\",\n  \"Jamaica\",\n  \"Japan\",\n  \"Jordan\",\n  \"Kazakhstan\",\n  \"Kenya\",\n  \"Kiribati\",\n  \"Korea North\",\n  \"Korea South\",\n  \"Kosovo\",\n  \"Kuwait\",\n  \"Kyrgyzstan\",\n  \"Laos\",\n  \"Latvia\",\n  \"Lebanon\",\n  \"Lesotho\",\n  \"Liberia\",\n  \"Libya\",\n  \"Liechtenstein\",\n  \"Lithuania\",\n  \"Luxembourg\",\n  \"Macedonia\",\n  \"Madagascar\",\n  \"Malawi\",\n  \"Malaysia\",\n  \"Maldives\",\n  \"Mali\",\n  \"Malta\",\n  \"Marshall Islands\",\n  \"Mauritania\",\n  \"Mauritius\",\n  \"Mexico\",\n  \"Micronesia\",\n  \"Moldova\",\n  \"Monaco\",\n  \"Mongolia\",\n  \"Montenegro\",\n  \"Morocco\",\n  \"Mozambique\",\n  \"Myanmar\",\n  \"Namibia\",\n  \"Nauru\",\n  \"Nepal\",\n  \"Netherlands\",\n  \"New Zealand\",\n  \"Nicaragua\",\n  \"Niger\",\n  \"Nigeria\",\n  \"Norway\",\n  \"Oman\",\n  \"Pakistan\",\n  \"Palau\",\n  \"Panama\",\n  \"Papua New Guinea\",\n  \"Paraguay\",\n  \"Peru\",\n  \"Philippines\",\n  \"Poland\",\n  \"Portugal\",\n  \"Qatar\",\n  \"Romania\",\n  \"Russian Federation\",\n  \"Rwanda\",\n  \"St Kitts & Nevis\",\n  \"St Lucia\",\n  \"Saint Vincent & the Grenadines\",\n  \"Samoa\",\n  \"San Marino\",\n  \"Sao Tome & Principe\",\n  \"Saudi Arabia\",\n  \"Senegal\",\n  \"Serbia\",\n  \"Seychelles\",\n  \"Sierra Leone\",\n  \"Singapore\",\n  \"Slovakia\",\n  \"Slovenia\",\n  \"Solomon Islands\",\n  \"Somalia\",\n  \"South Africa\",\n  \"South Sudan\",\n  \"Spain\",\n  \"Sri Lanka\",\n  \"Sudan\",\n  \"Suriname\",\n  \"Swaziland\",\n  \"Sweden\",\n  \"Switzerland\",\n  \"Syria\",\n  \"Taiwan\",\n  \"Tajikistan\",\n  \"Tanzania\",\n  \"Thailand\",\n  \"Togo\",\n  \"Tonga\",\n  \"Trinidad & Tobago\",\n  \"Tunisia\",\n  \"Turkey\",\n  \"Turkmenistan\",\n  \"Tuvalu\",\n  \"Uganda\",\n  \"Ukraine\",\n  \"United Arab Emirates\",\n  \"United Kingdom\",\n  \"United States\",\n  \"Uruguay\",\n  \"Uzbekistan\",\n  \"Vanuatu\",\n  \"Vatican City\",\n  \"Venezuela\",\n  \"Vietnam\",\n  \"Yemen\",\n  \"Zambia\",\n  \"Zimbabwe\"\n]\n","import { useState, useEffect } from 'react';\nimport createGraphLayout from './layout'\n\nimport ReactFlow, {\n  removeElements,\n  addEdge,\n  isNode,\n  MiniMap,\n  Controls,\n  Background\n} from 'react-flow-renderer';\n\t  \nimport { wordset } from \"./countries.js\";\n\nimport './App.css';\n\nfunction App() {\n  const [wordsetTitle, setWordsetTitle] = useState(\"countries\");\n  const [guess, setGuess] = useState()\n  const [showFullMap, setShowFullMap] = useState(false);\n  const [errorMessage, setErrorMessage] = useState();\n\n  const startNode = {\n    id: '1',\n    type: 'input', // input node\n    data: { label: 'Belgium' },\n    position: { x: 250, y: 25 },\n  }\n  \n  const initialElements = [startNode];\n\n  const [lastNode, setLastNode] = useState(startNode);\n  const [completeElements, setCompleteElements] = useState();\n  const [elements, setElements] = useState(initialElements);\n  const [viewFitHook, setViewFitHook] = useState(() => () => {});\n\n  useEffect(() => {\n    const finalWordset = loadWordset(wordsetTitle);\n    const allElements = buildCompleteGraph(finalWordset);\n    createGraphLayout(allElements)\n      .then(els => {\n\t\tsetCompleteElements(els);\n\t  })\n      .catch(err => console.error(err))\n  }, [wordsetTitle]);\n\n  const onLoad = (reactFlowInstance) => {\n    reactFlowInstance.fitView();\n  };\n\n  function loadWordset(wordsetTitle) {\n    let newWordset = null;\n    try {\n\t  newWordset = wordset;\n    }\n    catch (error) {\n      console.log(error);\n    }\n\n    return newWordset\n  }\n\n  function buildCompleteGraph(names) {\n    const firstLetterMap = new Map();\n    let nodes = [];\n    let edges = [];\n    for (const name of names) {\n      const node = {\n        id: (nodes.length + 1).toString(),\n        data: { label: name },\n        position: { x: 250, y: 25},\n\t\tconnectable: false\n      }\n\n      nodes.push(node);\n    }\n\n    for (const node of nodes) {\n      const firstLetter = node.data.label[0].toLowerCase();\n\n      const neighbors = firstLetterMap.get(firstLetter);\n      if (neighbors)\n        firstLetterMap.set(firstLetter, [...neighbors, node]);\n      else\n        firstLetterMap.set(firstLetter, [node]);\n    }\n    \n    for (const node of nodes) {\n      const lastLetter = node.data.label[node.data.label.length - 1];\n      const neighbors = firstLetterMap.get(lastLetter);\n\t  if (!neighbors)\n\t\tcontinue\n      for (const neighbor of neighbors) { \n        if (neighbor.id === node.id)\n          continue\n        \n        const edge = {\n          id: \" \".concat(\"e\", node.id, \"-\", neighbor.id),\n          source: node.id,\n          target: neighbor.id,\n\t\t  type: \"straight\",\n          style: { strokeWidth: '2.5' , stroke: \"#b1b1b7\"},\n          arrowHeadType: \"arrowclosed\"\n        };\n        \n        edges.push(edge);\n      }\n    }\n    return [...nodes, ...edges];\n  }\n\n  function addNode(name) {\n    const newNode = {\n      id: (elements.length + 1).toString(),\n      data: { label: name },\n      position: { x: 250, y: 25},\n    }\n \t\n    const edge = {\n      id: \" \".concat(\"e\", lastNode.id, \"-\", newNode.id),\n      source: lastNode.id,\n      target: newNode.id,\n      style: { strokeWidth: '2.5' , stroke: \"red\"},\n      arrowHeadType: \"arrowclosed\"\n    };\n\n\tlet extraneousEdges = [];\n\tlet firstLetter = name[0].toLowerCase();\n\tlet lastLetter = name[name.length-1].toLowerCase();\n    for (const element of elements) {\n      if (!isNode(element) || element.id === lastNode.id)\n\t\tcontinue\n\t  let otherFirstLetter = element.data.label[0].toLowerCase();\n\t  let otherLastLetter = element.data.label[element.data.label.length - 1].toLowerCase();\n\t  if (firstLetter === otherLastLetter) {\n        const extraneousEdge = {\n          id: \" \".concat(\"e\", element.id, \"-\", newNode.id),\n          source: element.id,\n          target: newNode.id,\n          style: { strokeWidth: '2.5' , stroke: \"#b1b1b7\", strokeDasharray: \"5 5\"},\n          arrowHeadType: \"arrowclosed\"\n        };\n\t\textraneousEdges.push(extraneousEdge);\n\t  }\n\t  if (lastLetter === otherFirstLetter) {\n        const extraneousEdge = {\n          id: \" \".concat(\"e\", newNode.id, \"-\", element.id),\n          source: newNode.id,\n          target: element.id,\n          style: { strokeWidth: '2.5' , stroke: \"#b1b1b7\", strokeDasharray: \"5 5\"},\n          arrowHeadType: \"arrowclosed\"\n        };\n\t\textraneousEdges.push(extraneousEdge);\n\t  }\n    }\n\n    let newElements = [...elements, newNode, ...extraneousEdges, edge];\n\tsetLastNode(newNode);\n    createGraphLayout(newElements)\n      .then(els => setElements(els))\n      .catch(err => console.error(err))\n  }\n\n  function handleSubmit(e) {\n\te.preventDefault();\n    if (!e.target.guess.value)\n\t  return\n    \n    let lastLetter = lastNode.data.label[lastNode.data.label.length-1].toLowerCase();\n\tif (lastLetter !== e.target.guess.value[0].toLowerCase()) {\n\t  setErrorMessage(`Your guess doesn't start with the letter '${lastLetter}'!`);\n\t  return\n    }\n\n    for (const element of elements) {\n\t  if (isNode(element) && element.data.label.toLowerCase() === e.target.guess.value.toLowerCase()){\n\t    setErrorMessage(`\"${e.target.guess.value}\" has already been guessed!`);\n\t\treturn\n      }\n\t}\n  \n\tlet inWordlist = false;  \n    for (const element of completeElements) {\n\t  if (isNode(element) && element.data.label.toLowerCase() === e.target.guess.value.toLowerCase()) {\n        inWordlist = true;\n\t\tbreak;\n      }\n\n\t}\n    if (! inWordlist) {\n\t  setErrorMessage(`\"${e.target.guess.value}\" is not in the wordlist!`);\n\t  return\n    }\n\n\taddNode(e.target.guess.value);\n  }\n\n  return (\n      <div className=\"gameBox\">\n        { showFullMap ?\n          <></>\n          :\n          <>\n            <br/>\n            <div>\n              Where to next?\n            </div>\n            <br/>\n            <form onSubmit={handleSubmit}>\n              <input\n                type=\"text\"\n                name=\"guess\"\n\t\t    \tvalue={guess}\n                onChange={(e) => {setGuess(e.target.value); setErrorMessage();}}\n              />\n              <input type=\"submit\" value=\"Guess\" />\n            </form>\n          </>\n        }\n        <br/>\n\t\t<button onClick={() => setShowFullMap(!showFullMap)}>{showFullMap ? \"Hide Full Map\" : \"Show Full Map\"}</button>\n        <br/>\n\t\t<div style={{color: \"red\"}}>{errorMessage}</div>\n        <br/>\n        <div style={{ border: \"1px solid black\", width: 750, height: 750 }}>\n\t\t  <ReactFlow\n\t\t\telements={(showFullMap) ? completeElements : elements}\n\t\t\tpanOnScroll={true}\n\t\t\tonlyRenderVisibleElements={true}\n\t\t\tonLoad={(instance) => {setTimeout(() => onLoad(instance), 500); setViewFitHook(() => () => onLoad(instance));}}\n\t\t  >\n            <MiniMap />\n            <Controls />\n            <Background />\n\t\t  </ReactFlow>\n\t\t</div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}