{"version":3,"sources":["layout.js","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["elk","Elk","defaultLayoutOptions","createGraphLayout","elements","a","nodes","edges","forEach","el","isNode","push","id","width","__rf","height","target","source","layout","children","newGraph","map","node","find","n","x","y","position","Math","random","App","useState","guess","setGuess","startNode","type","data","label","initialElements","lastNode","setLastNode","setElements","console","log","onSubmit","e","preventDefault","value","name","newNode","length","toString","edge","concat","newElements","then","els","catch","err","error","addNode","onChange","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d7a5da5.chunk.js","sourcesContent":["import Elk from 'elkjs/lib/elk.bundled.js';\nimport { isNode } from 'react-flow-renderer';\n\nconst DEFAULT_WIDTH = 75\nconst DEFAULT_HEIGHT = 75\n\nconst elk = new Elk({\n  defaultLayoutOptions: {\n    'elk.algorithm': 'elk.mrtree',\n    'elk.spacing.nodeNode': '75',\n  }\n})\n\nconst createGraphLayout = async (elements) => {\n  const nodes: ElkNode[] = []\n  const edges: ElkPrimitiveEdge[] = []\n\n  elements.forEach((el) => {\n    if (isNode(el)) {\n      nodes.push({\n        id: el.id,\n        width: el.__rf?.width ?? DEFAULT_WIDTH,\n        height: el.__rf?.height ?? DEFAULT_HEIGHT\n      })\n    } else {\n      edges.push({\n        id: el.id,\n        target: el.target,\n        source: el.source\n      })\n    }\n  })\n\n  const newGraph = await elk.layout({\n    id: 'root',\n    children: nodes,\n    edges: edges\n  })\n  return elements.map((el) => {\n    if (isNode(el)) {\n      const node = newGraph?.children?.find((n) => n.id === el.id)\n      if (node?.x && node?.y && node?.width && node?.height) {\n        el.position = {\n          x: node.x - node.width / 2 + Math.random() / 1000 + 250,\n          y: node.y - node.height / 2 + 25\n        }\n      }\n    }\n    return el\n  })\n}\n\nexport default createGraphLayout;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState } from 'react';\nimport createGraphLayout from './layout'\n\nimport ReactFlow, { removeElements, addEdge } from 'react-flow-renderer';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [guess, setGuess] = useState(\"Pennsylvania\")\n\n  const startNode = {\n    id: '1',\n    type: 'input', // input node\n    data: { label: 'guess' },\n    position: { x: 250, y: 25 },\n  }\n  \n  const initialElements = [startNode];\n\n  const [lastNode, setLastNode] = useState(startNode);\n  const [elements, setElements] = useState(initialElements);\n\n\n  function addNode(name) {\n    const newNode = {\n      id: (elements.length + 1).toString(),\n      data: { label: name },\n      position: { x: 250, y: 25},\n    }\n \tconst edge = {id: \" \".concat(\"e\", lastNode.id, newNode.id), source: lastNode.id, target: newNode.id };\n    let newElements = [...elements, newNode, edge];\n\tsetLastNode(newNode);\n    createGraphLayout(newElements)\n      .then(els => setElements(els))\n      .catch(err => console.error(err))\n  }\n\n  function handleSubmit(e) {\n\te.preventDefault();\n    console.log(e.target.guess.value);\n    if (e.target.guess.value !== guess)\n\t  addNode(e.target.guess.value)\n  }\n  console.log(elements);\n\n  return (\n      <>\n        <form onSubmit={handleSubmit}>\n          <label>\n            Where to go next?\n          </label>\n          <input\n            type=\"text\"\n            name=\"guess\"\n\t\t\tvalue={guess}\n            onChange={(e) => setGuess(e.value)}\n          />\n          <input type=\"submit\" value=\"Guess\" />\n        </form>\n        <div style={{ height: 1000 }}>\n\t\t  <ReactFlow elements={elements} />\n\t\t</div>\n      </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}